name: Update stable.json and DingTalk Notification

on:
  schedule:
    - cron: '30 0 * * *'
  workflow_dispatch:

jobs:
  update_stable:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Fetch remote stable.json
        id: fetch
        run: |
          # Fetch the remote stable.json from Home Assistant
          REMOTE_URL="https://version.home-assistant.io/stable.json"
          echo "Fetching stable.json from remote URL: $REMOTE_URL"
          curl -sL "$REMOTE_URL" -o remote-stable.json
          echo "Fetched remote file contents:"
          cat remote-stable.json
          echo "LOCAL_FILE=stable.json" >> "$GITHUB_OUTPUT"
          echo "REMOTE_FILE=remote-stable.json" >> "$GITHUB_OUTPUT"

      - name: Get local version info
        id: local
        run: | 
          LOCAL_FILE="${{steps.fetch.outputs.LOCAL_FILE}}"
          
          if [ ! -f "$LOCAL_FILE" ]; then
            echo "Error: $LOCAL_FILE does not exist!"
            exit 1
          fi
          
          LOCAL_HOME=$(jq '.homeassistant' "$LOCAL_FILE")
          LOCAL_SUPERVISOR=$(jq -r '.supervisor' "$LOCAL_FILE")
          
          echo "local_home<<EOF" >> $GITHUB_OUTPUT
          echo "$LOCAL_HOME" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "local_supervisor=$LOCAL_SUPERVISOR" >>  "$GITHUB_OUTPUT"
          
          echo "local_homeÔºö$LOCAL_HOME"
          echo "local_supervisorÔºö$LOCAL_SUPERVISOR"

      - name: Get remote version info
        id: remote
        run: |
          REMOTE_FILE="${{steps.fetch.outputs.REMOTE_FILE}}"
          
          if [ ! -f "$REMOTE_FILE" ]; then
            echo "Error: $REMOTE_FILE does not exist!"
            exit 1
          fi
          
          REMOTE_HOME=$(jq '.homeassistant' "$REMOTE_FILE")
          REMOTE_SUPERVISOR=$(jq -r '.supervisor' "$REMOTE_FILE")
          
          echo "remote_home<<EOF" >> $GITHUB_OUTPUT
          echo "$REMOTE_HOME" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "remote_supervisor=$REMOTE_SUPERVISOR" >>  "$GITHUB_OUTPUT"
          
          echo "remote_homeÔºö$REMOTE_HOME"
          echo "remote_supervisorÔºö$REMOTE_SUPERVISOR"

      - name: Compare homeassistant core versions & update stable.json & dev.json
        id: compare_core
        run: |
          LOCAL_FILE="${{steps.fetch.outputs.LOCAL_FILE}}"
          homeassistant_diff=false
          if [ "${{ steps.local.outputs.local_home  }}" != "${{ steps.remote.outputs.remote_home}}" ]; then
            homeassistant_diff=true
            # Update the local file's homeassistant field
            jq --argjson newHome '${{steps.remote.outputs.remote_home}}' '.homeassistant = $newHome' "$LOCAL_FILE" > temp.json
            jq --argjson newHome '${{steps.remote.outputs.remote_home}}' '.homeassistant = $newHome' "dev.json" > temp_1.json
            mv temp.json "$LOCAL_FILE"
            mv temp_1.json "dev.json"
          fi
          echo "homeassistant_diff=$homeassistant_diff" >>  "$GITHUB_OUTPUT"
          echo "homeassistant_diff=$homeassistant_diff"

      - name: Compare supervisor version
        id: compare_supervisor
        run: |
          supervisor_diff=false
          if [ "${{ steps.local.outputs.local_supervisor }}" != "${{ steps.remote.outputs.remote_supervisor }}" ]; then
            supervisor_diff=true
          fi
          echo "supervisor_diff=$supervisor_diff" >>  "$GITHUB_OUTPUT"
          echo "supervisor_diff=$supervisor_diff"

      - name: Generate DingTalk message
        id: message
        if: steps.compare_core.outputs.homeassistant_diff == 'true' || steps.compare_supervisor.outputs.supervisor_diff == 'true'
        run: |
          message_title="Êñ∞ÁâàÊú¨ReleaseÊ£ÄÊµãÈÄöÁü•"
          message_body+="---------------------------------------\n\n"
          
          if [ "${{ steps.compare_supervisor.outputs.supervisor_diff }}" == 'true' ]; then
              message_body+="**SupervisorÁâàÊú¨ÈúÄË¶ÅÊõ¥Êñ∞:** \n\n **ÁâàÊú¨‰ø°ÊÅØ:[${{ steps.local.outputs.local_supervisor }}] ‚û°Ô∏è [${{ steps.remote.outputs.remote_supervisor }}]**\n\n"
              message_body+="---------------------------------------\n\n"
          fi
          
          if [ "${{ steps.compare_core.outputs.homeassistant_diff }}" == 'true' ]; then
               message_body+="**Homeassistant CoreÁâàÊú¨Âè∑Â∑≤ÂêåÊ≠•Êõ¥Êñ∞:** \n\n **ÁâàÊú¨‰ø°ÊÅØ:**\n\n"
    
              local_versions='${{ steps.local.outputs.local_home }}'
              remote_versions='${{ steps.remote.outputs.remote_home }}' 
          
              platforms=$(echo "$local_versions" | jq -r 'keys_unsorted[]' | sort)

              while IFS= read -r platform; do
                  local_version=$(echo "$local_versions" | jq -r ".[\"$platform\"]")
                  remote_version=$(echo "$remote_versions" | jq -r ".[\"$platform\"]")
    
                  # Âè™Ê∑ªÂä†ÊúâÂèòÊõ¥ÁöÑÂπ≥Âè∞
                  if [ "$local_version" != "$remote_version" ]; then
                      message_body+="- **$platform: [$local_version] ‚û°Ô∏è [$remote_version]**\n\n"
                  fi
              done <<< "$platforms"
    
              message_body+="\n---------------------------------------\n\n"
          fi
          
          echo "message_title=$message_title" >> $GITHUB_OUTPUT
          echo "message_body<<EOF" >> $GITHUB_OUTPUT
          echo "$message_body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "message: $message_body"

      - name: Send DingTalk notification
        id: send
        if: steps.compare_core.outputs.homeassistant_diff == 'true' || steps.compare_supervisor.outputs.supervisor_diff == 'true'
        run: |
          timestamp=$(TZ='Asia/Shanghai' date +"%Y-%m-%d %H:%M:%S%:z")

          message=$(cat <<EOF
          {
            "msgtype": "markdown",
            "markdown": {
              "title": "${{ steps.message.outputs.message_title }}",
              "text": "**üîé Haos-versionÁâàÊú¨Êõ¥Êñ∞Ê£ÄÊµãÊé®ÈÄÅ** \n\n üöÄ **Ê£ÄÊµãÊó∂Èó¥: $timestamp**\n\n${{ steps.message.outputs.message_body }}"
            },
            "at": {
              "isAtAll": true
            }
          }
          EOF
          )

          response=$(curl -s -X POST "${{ secrets.DINGTALK_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d "$message")

          if echo "$response" | grep -q "errcode\":0"; then
            echo "success"
            echo "notification_status=success" >> $GITHUB_OUTPUT
          else
            echo "faild: $response"
            echo "notification_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Commit and Push changes if needed
        id: commit_and_push
        if: steps.compare_core.outputs.homeassistant_diff == 'true' && steps.send.outputs.notification_status == 'success'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add stable.json dev.json
          git commit -m "Sync stable.json homeassistant core version"
          git push
          echo "update=true" >> $GITHUB_OUTPUT

      - name: Check had built image
        id: check
        run: |
          TAG=${{inputs.tag}}
          echo "Checking for image tag: $TAG"
          response=$(curl -sSL \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.MOSUXIAO_TOKEN }}" \
            "https://api.github.com/orgs/iHost-Open-Source-Project/packages/container/armv7-hassio-supervisor/versions")
          echo "$response"
          if echo "$response" | jq -e --arg TAG "$TAG" '.[] | select(.metadata.container.tags[]? == $TAG)' > /dev/null 2>&1; then
            echo "$TAG Image is exist!"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "$TAG Image is not exist!"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

          
      - name: Trigger Build Image
        uses: actions/github-script@v7.0.1
        if: steps.compare_supervisor.outputs.supervisor_diff == 'true' && steps.check.outputs.should_build == 'true'
        with:
          github-token: ${{ secrets.MOSUXIAO_TOKEN }}
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: "iHost-Open-Source-Project",
              repo: "actions-runner",
              workflow_id: "supervisor_release_armv7.yml",
              ref: "main",
              inputs: {
                tag:"${{ steps.remote.outputs.remote_supervisor }}"
              }
            })
